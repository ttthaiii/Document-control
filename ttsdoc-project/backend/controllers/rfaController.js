const fs = require('fs').promises;
const { pool } = require('../config/database');
const driveService = require('../config/googleDrive');
const { uploadFile } = require('./uploadController');

const FileService = require('../services/fileService');
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Model ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
const RfaModel = require('../models/rfaModel');
const CategoryModel = require('../models/categoryModel');
const DocumentModel = require('../models/documentModel');
const UserModel = require('../models/userModel');

const EDITABLE_STATUSES = ['‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)', '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'];
const initialStatus = "BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö";

const { sendLineNotify } = require('../services/lineNotifyService');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï RFA - ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà roleMiddleware ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
const checkRFAPermission = (jobPosition) => {
    const authorizedPositions = ['BIM', 'Adminsite', 'OE', 'CM', 'Adminsite2'];
    return authorizedPositions.includes(jobPosition);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA
const uploadRFADocument = async (req, res) => {
  try {
    console.log('Request files:', req.files);
    console.log('Request body:', req.body);

    if (!checkRFAPermission(req.user.jobPosition)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA');
    }

    if (!req.files || req.files.length === 0) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå');
    }

    const { siteId, fullDocumentNumber, revisionNumber, title } = req.body;

    if (!siteId || !fullDocumentNumber || !revisionNumber || !title) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    // ‡πÅ‡∏¢‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å fullDocumentNumber
    const parts = fullDocumentNumber.split('-');
    const categoryCode = parts.length > 1 ? parts[0] : '';
    const documentNumber = parts.length > 1 ? parts[1] : fullDocumentNumber;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥
    const existingDocs = await RfaModel.checkExistingDocument(siteId, fullDocumentNumber);
    if (existingDocs.length > 0) {
      throw new Error('‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ category_id
    const categoryId = await CategoryModel.getCategoryId(categoryCode, siteId);
    if (!categoryId) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '${categoryCode}' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA
    const rfaDocumentId = await RfaModel.createRfaDocument(
      siteId,
      categoryId,
      documentNumber,
      revisionNumber,
      req.user.id,
      title,
      fullDocumentNumber,
      initialStatus
    );

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ FileService)
    for (const file of req.files) {
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å newDocumentId ‡πÄ‡∏õ‡πá‡∏ô rfaDocumentId
      await FileService.uploadRfaDocumentFile(rfaDocumentId, req.user.id, file, initialStatus);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    const [[siteInfo]] = await pool.query(
      'SELECT site_name, line_group_id FROM sites WHERE id = ?',
      [siteId]
    );

    // ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å (‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    const fileUrl = req.files[0]?.url || '-';

    // ‡∏™‡πà‡∏á LINE
    await sendLineNotify(siteInfo.line_group_id,
      `üìÑ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${siteInfo.site_name}\n` +
      `üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${fullDocumentNumber}\n` +
      `üîÑ rev: ${revisionNumber}\n` +
      `üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${initialStatus}\n` +
      `üîó ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ${fileUrl}`
    );
    
    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      rfaId: rfaDocumentId
    });

  } catch (error) {
    console.error('Error in uploadRFADocument:', error);
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
    if (req.files && req.files.length > 0) {
      await FileService.cleanupFailedUploads(req.files.map(file => file.path));
    }
    
    res.status(500).json({ success: false, error: error.message });
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà user ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
const getUserSites = async (req, res) => {
  try {
    // ‡πÉ‡∏ä‡πâ UserModel ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const sites = await UserModel.getUserSites(req.user.id);
    res.json({ success: true, sites });
  } catch (error) {
    console.error('Database error:', error);
    res.status(500).json({ success: false, error: 'Failed to fetch user sites' });
  }
};

// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
const getCategories = async (req, res) => {
  try {
    const { siteId } = req.params;
    console.log('Getting categories for site:', siteId);

    // ‡πÉ‡∏ä‡πâ CategoryModel ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const categories = await CategoryModel.getCategoriesBySite(siteId);
    
    console.log('Categories found:', categories);
    return res.json({ 
      success: true, 
      categories: categories || [] 
    });

  } catch (error) {
    console.error('Error in getCategories:', error);
    return res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥
const checkExistingDocument = async (req, res) => {
  try {
    if (!checkRFAPermission(req.user.jobPosition)) { 
      return res.status(403).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA' 
      });
    }

    const { siteId, fullDocumentNumber } = req.query;
    
    console.log('Checking document:', { siteId, fullDocumentNumber });
    
    if (!siteId || !fullDocumentNumber) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters'
      });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Model
    const documents = await RfaModel.checkExistingDocument(siteId, fullDocumentNumber);

    console.log('Found documents:', documents.length);

    if (documents.length > 0) {
      const doc = documents[0];
      console.log('Latest document status:', doc.status);
      
      const canEdit = EDITABLE_STATUSES.includes(doc.status);
      
      return res.json({
        success: true,
        exists: true,
        documents: [doc],
        canEdit: canEdit
      });
    }

    res.json({ 
      success: true, 
      exists: false,
      documents: [] 
    });

  } catch (error) {
    console.error('Error in checkExistingDocument:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
const addCategory = async (req, res) => {
  try {
    const { siteId, categoryName, categoryCode, description } = req.body;
    
    // ‡πÉ‡∏ä‡πâ CategoryModel ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    await CategoryModel.createCategory(siteId, categoryName, categoryCode, description);
    
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};

// ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA ‡∏ï‡∏≤‡∏°‡πÑ‡∏ã‡∏ï‡πå
const getRFADocuments = async (req, res) => {
  try {
    console.log('req.user in getRFADocuments:', req.user);
    
    const { siteId } = req.params;
    // ‡∏ñ‡πâ‡∏≤ req.user ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const userId = req.user?.id || null;
    
    if (!userId) {
      console.error('User ID is missing');
      return res.status(401).json({
        success: false,
        error: 'User authentication failed'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ã‡∏ï‡πå
    const userSites = await UserModel.getUserSitesById(userId, siteId);
    if (userSites.length === 0) {
      return res.status(403).json({
        success: false,
        error: 'You do not have access to this site'
      });
    }

    // ‡πÉ‡∏ä‡πâ RfaModel ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const documents = await RfaModel.getDocumentsBySite(siteId);

    return res.json({ success: true, documents });

  } catch (error) {
    console.error('Error details:', {
      error: error.message,
      stack: error.stack,
      siteId: req.params.siteId
    });
    return res.status(500).json({
      success: false,
      error: 'Failed to fetch documents: ' + error.message
    });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA
const updateRFADocument = async (req, res) => {
  try {
    console.log('Request files:', req.files ? req.files.length : 'No files');
    console.log('Request body:', req.body);
    
    if (!checkRFAPermission(req.user.jobPosition)) {
      return res.status(403).json({ success: false, error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RFA' });
    }

    const { documentId, status } = req.body;
    if (!req.files || req.files.length === 0 || !documentId) {
      return res.status(400).json({ success: false, error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
    const document = await RfaModel.getDocumentById(documentId);
    if (!document) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
    
    let newDocumentId = documentId;
    let newRevisionNumber = document.revision_number;

    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (document.status === '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° revision number
      const rev = parseInt(document.revision_number || '0');
      newRevisionNumber = (rev + 1).toString().padStart(2, '0');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
      newDocumentId = await RfaModel.createNewRevision(
        document,
        newRevisionNumber,
        req.user.id,
        status || 'BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö'
      );
    } else {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
      const updateFields = {
        status: status || 'BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö',
        updated_by: req.user.id,
        previous_status: document.status
      };
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö
      if (document.status === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' && status === 'BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö') {
        updateFields.shop_date = new Date().toISOString().split('T')[0];
      }
      
      await RfaModel.updateDocumentFields(documentId, updateFields);
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ FileService)
    for (const file of req.files) {
      await FileService.uploadRfaDocumentFile(newDocumentId, req.user.id, file, status || 'BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö');
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    const [[siteInfo]] = await pool.query(
      'SELECT site_name, line_group_id FROM sites WHERE id = ?',
      [document.site_id]
    );

    // ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å
    const fileUrl = req.files[0]?.url || '-';

    await sendLineNotify(siteInfo.line_group_id,
      `üìÑ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${siteInfo.site_name}\n` +
      `üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${document.full_document_number}\n` +
      `üîÑ rev: ${newRevisionNumber}\n` +
      `üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}\n` +
      `üîó ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ${fileUrl}`
    );

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        originalDocumentId: documentId,
        newDocumentId: newDocumentId,
        newRevisionNumber
      }
    });

  } catch (error) {
    console.error('Error in updateRFADocument:', error);
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
    if (req.files && req.files.length > 0) {
      await FileService.cleanupFailedUploads(req.files.map(file => file.path));
    }
    
    res.status(500).json({ success: false, error: error.message });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á site)
const getApprovedDocuments = async (req, res) => {
  try {
    const userId = req.user.id;
    const sites = await UserModel.getUserSites(userId);

    if (!sites || sites.length === 0) {
      return res.json({ success: true, documents: [] });
    }

    const siteIds = sites.map(site => site.id);
    const approvalStatuses = [
      '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)',
      '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)'
    ];

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î getLatestApprovedDocumentsBySites ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™ RfaModel
    const documents = await RfaModel.getLatestApprovedDocumentsBySites(siteIds, approvalStatuses);

    return res.json({ success: true, documents });
  } catch (error) {
    console.error('Error in getApprovedDocuments:', error);
    return res.status(500).json({ success: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' });
  }
};

module.exports = {
    checkRFAPermission,
    uploadRFADocument,
    getUserSites,   
    getCategories,  
    checkExistingDocument,
    addCategory,
    getRFADocuments,
    updateRFADocument,
    getApprovedDocuments
};