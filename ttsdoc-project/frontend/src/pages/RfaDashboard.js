import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Doughnut } from 'react-chartjs-2';
import { DocumentProvider } from '../contexts/DocumentContext';
import { useDocumentContext } from '../contexts/DocumentContext';
import { 
  getResponsibleParty, 
  calculatePendingDays, 
  canCreateNewDocument 
} from '../utils/documentUtils';
import api from '../services/api';

// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
import DocumentViewer from '../components/document/DocumentViewer';
import DocumentUploadForm from '../components/document/DocumentUploadForm';
import DocumentUpdateForm from '../components/document/DocumentUpdateForm';
import DocumentStatusForm from '../components/document/DocumentStatusForm';

// ‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ChartJS components
ChartJS.register(ArcElement, Tooltip, Legend);

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå SuccessModal (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà)
const SuccessModal = ({ message, onClose }) => {
  return (
    <div className="success-modal-backdrop">
      <div className="success-modal">
        <div className="success-modal-content">
          <div className="success-icon">‚úì</div>
          <h3>{message}</h3>
          <button 
            className="close-success-btn"
            onClick={onClose}
          >
            ‡∏õ‡∏¥‡∏î
          </button>
        </div>
      </div>
    </div>
  );
};

const RfaDashboardContent = ({ user }) => {
  const navigate = useNavigate();
  const [sites, setSites] = useState([]);
  const [selectedSite, setSelectedSite] = useState('');
  const [showLatestRevOnly, setShowLatestRevOnly] = useState(true);
  const [chartData, setChartData] = useState(null);
  const [statusFilter, setStatusFilter] = useState('all');
  const [showNewDocumentForm, setShowNewDocumentForm] = useState(false);
  const [categories, setCategories] = useState([]);
  const [formData, setFormData] = useState({
    file: null,
    full_document_number: '',
    revision_number: '',
    title: ''
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [isExporting, setIsExporting] = useState(false);
  const [updateDocumentSuccess, setUpdateDocumentSuccess] = useState('');
  const [newDocumentSuccess, setNewDocumentSuccess] = useState('');
  const [isInitialLoad, setIsInitialLoad] = useState(true);

  // ‡πÉ‡∏ä‡πâ context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const {
    documents,
    setDocuments,
    filteredDocuments,
    setFilteredDocuments,
    selectedDocument,
    setSelectedDocument,
    loading,
    setLoading,
    error,
    setError, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á setError ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    success,
    setSuccess,
    showError,
    showSuccess
  } = useDocumentContext();

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    if (user && user.jobPosition) {
      loadSites();
    }
  }, [user]);

  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
  useEffect(() => {
    if (selectedSite) {
      loadDocuments();
    }
  }, [selectedSite]);

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ rev ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  useEffect(() => {
    filterDocuments();
  }, [documents, searchTerm, showLatestRevOnly, statusFilter]);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default statusFilter ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô
  useEffect(() => {
    if (user && user.jobPosition && statusFilter === '') {
      if (user.jobPosition === 'BIM') {
        setStatusFilter('BIM');
      } else if (user.jobPosition === 'Adminsite' || user.jobPosition === 'Adminsite2') {
        setStatusFilter('SITE');
      } else if (user.jobPosition === 'CM') {
        setStatusFilter('CM');
      } else {
        setStatusFilter('all'); // fallback
      }
    }
  }, [user]);   

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÇ‡∏î‡∏ô‡∏±‡∏ó
  useEffect(() => {
    prepareChartData();
  }, [documents, selectedSite, statusFilter]);  
    
  // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
  useEffect(() => {
    if (selectedSite) {
      loadCategories();
    }
  }, [selectedSite]);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    return () => {
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
      setIsInitialLoad(false);
    };
  }, []);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    if (selectedSite) {
      setIsInitialLoad(true); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô true ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
      loadDocuments();
    }
  }, [selectedSite]);  

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
  const loadSites = async () => {
    try {
      setLoading(true);
      setError(''); // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ setError ‡πÅ‡∏•‡πâ‡∏ß
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/');
        return;
      }
  
      const response = await fetch('/api/user/rfa/user-sites', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
  
      const data = await response.json();
      if (data.success) {
        setSites(data.sites);
        if (data.sites.length > 0) {
          setSelectedSite(data.sites[0].id);
        }
      } else {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å setError ‡πÄ‡∏õ‡πá‡∏ô showError ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ setError ‡∏à‡∏£‡∏¥‡∏á
        showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ');
        // ‡∏´‡∏£‡∏∑‡∏≠
        // setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Error loading sites:', error);
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å setError ‡πÄ‡∏õ‡πá‡∏ô showError ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ setError ‡∏à‡∏£‡∏¥‡∏á
      showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£');
      // ‡∏´‡∏£‡∏∑‡∏≠
      // setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£');
    } finally {
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const loadDocuments = async (forceReload = false) => {
    try {
      setLoading(true);
      setError('');
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
      const timestamp = forceReload ? `?t=${Date.now()}` : '';
      const response = await api.get(`/api/user/rfa/documents/${selectedSite}${timestamp}`);
      
      console.log("üì¶ Loaded documents for site:", selectedSite, response.data.documents.length);
  
      if (response.data.success) {
        setDocuments(response.data.documents);
      } else {
        showError(response.data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
      }
    } catch (error) {
      console.error('Error loading documents:', error);
      showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
    } finally {
      setIsInitialLoad(false);
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const loadCategories = async () => {
    if (!selectedSite) return;
    
    try {
      setLoading(true);
      setError('');
      
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/');
        return;
      }

      const response = await fetch(`/api/user/rfa/categories/${selectedSite}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });
      
      const data = await response.json();
      if (data.success) {
        setCategories(data.categories);
      } else {
        setError(data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Error loading categories:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
    } finally {
      setLoading(false);
    }
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filterDocuments
  const filterDocuments = () => {
    if (loading) return;

    let filtered = [...documents];
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(doc => {
        const docId = doc.full_document_number 
          ? `${doc.full_document_number}_${doc.revision_number || ''}`.toLowerCase()
          : `${doc.category_code || ''}-${doc.document_number || ''}_${doc.revision_number || ''}`.toLowerCase();
        const docTitle = (doc.title || '').toLowerCase();
        return docId.includes(term) || docTitle.includes(term);
      });
    }

    console.log("‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á Latest Rev:", filtered.length);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ revision ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡∏¢‡πâ‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (showLatestRevOnly) {
      const latestRevisions = new Map();
      
      filtered.forEach(doc => {
        // ‡πÉ‡∏ä‡πâ full_document_number ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å category_code ‡πÅ‡∏•‡∏∞ document_number
        const docNum = doc.full_document_number || 
                    (doc.category_code && doc.document_number ? 
                    `${doc.category_code}-${doc.document_number}` : 
                    doc.id.toString());
        
        const currentRev = parseInt(doc.revision_number) || 0;
        const existingRev = latestRevisions.has(docNum) ? 
                            (parseInt(latestRevisions.get(docNum).revision_number) || 0) : 
                            -1;
        
        if (!latestRevisions.has(docNum) || currentRev > existingRev) {
          latestRevisions.set(docNum, doc);
        }
      });
      
      filtered = Array.from(latestRevisions.values());
      console.log("‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á Latest Rev:", filtered.length);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    if (statusFilter !== 'all') {
      filtered = filtered.filter(doc => {
        if (statusFilter === 'BIM') {
          return getResponsibleParty(doc) === 'BIM';
        } else if (statusFilter === 'SITE') {
          return getResponsibleParty(doc) === 'SITE';
        } else if (statusFilter === 'CM') {
          return getResponsibleParty(doc) === 'CM';
        } else if (statusFilter === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
          return getResponsibleParty(doc) === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥';
        }
        return true;
      });
    }

    setFilteredDocuments(filtered);
  };

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÇ‡∏î‡∏ô‡∏±‡∏ó
  const prepareChartData = () => {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á chartData ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ totalCount = 0
    if (documents.length === 0) {
      setChartData({
        labels: ['BIM', 'SITE', 'CM', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'],
        datasets: [{
          data: [0, 0, 0, 0],
          backgroundColor: ['#FFD700', '#FF6384', '#36A2EB', '#4BC0C0'],
          borderWidth: 0,
        }],
        totalCount: 0
      });
      return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const latestRevsMap = new Map();
    
    // ‡∏´‡∏≤ revision ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    documents.forEach(doc => {
      const key = `${doc.full_document_number}_${doc.site_id}`;
      if (!latestRevsMap.has(key) || 
          parseInt(doc.revision_number) > parseInt(latestRevsMap.get(key).revision_number)) {
        latestRevsMap.set(key, doc);
      }
    });
    
    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥
    const chartDocsData = Array.from(latestRevsMap.values());
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (BIM, SITE, CM, ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
    const bimCount = chartDocsData.filter(doc => getResponsibleParty(doc) === 'BIM').length;
    const siteCount = chartDocsData.filter(doc => getResponsibleParty(doc) === 'SITE').length;
    const cmCount = chartDocsData.filter(doc => getResponsibleParty(doc) === 'CM').length;
    const approvedCount = chartDocsData.filter(doc => getResponsibleParty(doc) === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥').length;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
    const totalCount = bimCount + siteCount + cmCount + approvedCount;
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    const defaultColors = ['#FFD700', '#FF6384', '#36A2EB', '#4BC0C0']; // BIM, SITE, CM, ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    
    let backgroundColor = [...defaultColors];
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥
    if (statusFilter !== 'all') {
      backgroundColor = defaultColors.map((color, index) => {
        if ((statusFilter === 'BIM' && index === 0) ||
            (statusFilter === 'SITE' && index === 1) ||
            (statusFilter === 'CM' && index === 2) ||
            (statusFilter === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' && index === 3)) {
          return color; // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        } else {
          // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏à‡∏≤‡∏á‡∏•‡∏á 
          return color + '15'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° alpha channel 50%
        }
      });
    }
  
    setChartData({
      labels: ['BIM', 'SITE', 'CM', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'],
      datasets: [
        {
          data: [bimCount, siteCount, cmCount, approvedCount],
          backgroundColor: backgroundColor,
          borderColor: backgroundColor.map(color => color.length > 7 ? color.substring(0, 7) : color), // ‡∏ï‡∏±‡∏î alpha ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ border ‡πÄ‡∏Ç‡πâ‡∏°
          borderWidth: 0,
        },
      ],
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
      totalCount: totalCount
    });
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÇ‡∏î‡∏ô‡∏±‡∏ó
  const handleChartClick = (_, elements) => {
    if (elements.length > 0) {
      const dataIndex = elements[0].index;
      const clickedLabel = chartData.labels[dataIndex];
      
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
      if ((statusFilter === 'BIM' && clickedLabel === 'BIM') ||
          (statusFilter === 'SITE' && clickedLabel === 'SITE') ||
          (statusFilter === 'CM' && clickedLabel === 'CM') ||
          (statusFilter === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' && clickedLabel === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')) {
        setStatusFilter('all');
      } else {
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
        setStatusFilter(clickedLabel);
      }
    }
  };

  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const showDocumentDetails = (document) => {
    setSelectedDocument(document);
  };

  // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const handleFormClose = (result) => {
    setSelectedDocument(null);
    setUpdateDocumentSuccess('');
    
    if (result === 'success') {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ loadDocuments ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache
      loadDocuments(true);
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const handleNewDocumentClick = () => {
    setShowNewDocumentForm(true);
    setSelectedDocument(null);
  };

  // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const handleNewDocumentClose = () => {
    setShowNewDocumentForm(false);
    setNewDocumentSuccess('');
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
  const handleSiteChange = (e) => {
    setSelectedSite(e.target.value);
    setDocuments([]);
    setFilteredDocuments([]);
    setError('');
    setSuccess('');
    setSelectedDocument(null);
    setNewDocumentSuccess('');
    setUpdateDocumentSuccess('');
    setChartData(null); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï chartData ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô site
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const checkExistingDocument = async () => {
    if (!formData.full_document_number) return false;

    try {
      setLoading(true);
      setError('');
      const token = localStorage.getItem('token');
      
      const response = await fetch(`/api/user/rfa/check-document?siteId=${selectedSite}&fullDocumentNumber=${formData.full_document_number}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });
      
      const data = await response.json();
      if (data.exists) {
        setError('‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        return true;
      }
      return false;
    } catch (error) {
      console.error('Error checking document:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
      return true;
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const handleNewDocumentSubmit = async (e) => {
    e.preventDefault();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!formData.full_document_number || !formData.title || !formData.revision_number || !formData.file) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥
    const exists = await checkExistingDocument();
    if (exists) return;
    
    try {
      setLoading(true);
      setError('');
      
      const formDataObj = new FormData();
      formDataObj.append('siteId', selectedSite);
      formDataObj.append('fullDocumentNumber', formData.full_document_number);
      formDataObj.append('revisionNumber', formData.revision_number);
      formDataObj.append('title', formData.title);
      
      // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
      if (formData.file) {
        if (Array.isArray(formData.file)) {
          formData.file.forEach(f => formDataObj.append('documents', f));
        } else {
          formDataObj.append('documents', formData.file);
        }
      }

      const token = localStorage.getItem('token');
      const response = await fetch('/api/user/rfa/upload', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formDataObj
      });
      
      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }
      
      const result = await response.json();
      if (result.success) {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        loadDocuments();
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
        setFormData({
          file: null,
          full_document_number: '',
          revision_number: '',
          title: ''
        });
        
        // ‡∏õ‡∏¥‡∏î loading
        setLoading(false);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        setNewDocumentSuccess('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡πÅ‡∏™‡∏î‡∏á success modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          setShowNewDocumentForm(false);
          setNewDocumentSuccess('');
          setSuccessMessage('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          setShowSuccessModal(true);
        }, 2000);
      } else {
        setLoading(false);
        setError(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
      }
    } catch (error) {
      console.error('Error uploading document:', error);
      setLoading(false);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV
  const exportToCSV = () => {
    setIsExporting(true);
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV
      const csvRows = [];
      
      // ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const headers = [
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
        '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á shop',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        '‡∏Ñ‡πâ‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏ß‡∏±‡∏ô)',
        '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö'
      ];
      csvRows.push(headers.join(','));
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      filteredDocuments.forEach(doc => {
        const row = [
          `${doc.category_code}-${doc.document_number}_${doc.revision_number}`,
          `"${doc.title.replace(/"/g, '""')}"`, // ‡πÉ‡∏™‡πà "" ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á double quote
          doc.created_at || '',
          doc.send_approval_date || '',
          doc.approval_date || '',
          doc.status,
          calculatePendingDays(doc),
          getResponsibleParty(doc)
        ];
        csvRows.push(row.join(','));
      });
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
      const csvContent = csvRows.join('\n');
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `shop_drawing_dashboard_${new Date().toISOString().slice(0, 10)}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error exporting to CSV:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsExporting(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const handleStatusUpdateSubmit = (formData) => {
    if (user?.jobPosition === 'BIM') {
      handleBimUpdate(formData);
    } else {
      handleAdminUpdate(formData);
    }
  };

  // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Admin/CM
  const handleAdminUpdate = async (formData) => {
    setLoading(true);
    
    const submitData = new FormData();
    submitData.append('documentId', formData.documentId);
    submitData.append('selectedStatus', formData.status);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ file ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (formData.file && formData.file.length > 0) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏´‡πâ loop ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
      formData.file.forEach((file, index) => {
        submitData.append('documents', file);
      });
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/user/rfa/update-status', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: submitData
      });
  
      const data = await response.json();
  
      if (data.success) {
        // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache
        loadDocuments(true);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        setUpdateDocumentSuccess('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏õ‡∏¥‡∏î loading ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          setSelectedDocument(null);
          setUpdateDocumentSuccess('');
          setSuccessMessage('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          setShowSuccessModal(true);
        }, 2000);
      } else {
        setLoading(false);
        setError(data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
      }
    } catch (error) {
      console.error('Error updating status:', error);
      setLoading(false);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BIM
  const handleBimUpdate = async (formData) => {
    try {
      setLoading(true);
      setError('');
      
      const submitData = new FormData();
      submitData.append('documentId', formData.documentId);
      submitData.append('status', 'BIM ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö'); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ default
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ file ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (formData.file && formData.file.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏´‡πâ loop ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        formData.file.forEach((file, index) => {
          submitData.append('documents', file);
        });
      }

      const token = localStorage.getItem('token');
      const response = await fetch('/api/user/rfa/update', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: submitData
      });

      const result = await response.json();
      if (result.success) {
        let message = '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        
        // ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        if (result.data?.newRevisionNumber) {
          if (result.data.newDocumentId && result.data.newDocumentId !== result.data.originalDocumentId) {
            message += ` ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà Rev.No: ${result.data.newRevisionNumber}`;
          }
          else {
            message += ` Rev.No: ${result.data.newRevisionNumber}`;
          }
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        loadDocuments(true);
                
        // ‡∏õ‡∏¥‡∏î loading
        setLoading(false);
        
        // ‡πÅ‡∏™‡∏î‡∏á success modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          setSelectedDocument(null);
          setUpdateDocumentSuccess('');
          setSuccessMessage(message);
          setShowSuccessModal(true);
        }, 2000);
      } else {
        setLoading(false);
        setError(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.error('Error updating document:', error);
      setLoading(false);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
    }
  };

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
const chartOptions = {
  responsive: true,
  cutout: '65%', // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏ô‡∏±‡∏ó‡∏°‡∏µ‡∏£‡∏π‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
  plugins: {
    legend: {
      position: 'bottom',
    },
    tooltip: {
      callbacks: {
        label: function(context) {
          const label = context.label || '';
          const value = context.raw || 0;
          // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
          return `${label}: ${value}`;
        }
      }
    }
  },
  onClick: handleChartClick
};

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏î‡∏ô‡∏±‡∏ó
const DonutCenterText = ({ data, statusFilter }) => {
// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
let totalToShow = 0;

if (statusFilter === 'all') {
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  totalToShow = data.datasets[0].data.reduce((sum, value) => sum + value, 0);
} else {
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡πâ‡∏ô
  const index = data.labels.findIndex(label => {
    return (
      (statusFilter === 'BIM' && label === 'BIM') ||
      (statusFilter === 'SITE' && label === 'SITE') ||
      (statusFilter === 'CM' && label === 'CM') ||
      (statusFilter === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' && label === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')
    );
  });
  
  if (index !== -1) {
    totalToShow = data.datasets[0].data[index];
  }
}

return (
  <div className="donut-center-text">
    <div className="count-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏°</div>
    <div className="count-value">{totalToShow}</div>
  </div>
);
};

// ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á JSX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
return (
<div className="rfa-dashboard-container">
  <h1>‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á</h1>
  {/* ‡πÅ‡∏™‡∏î‡∏á Loading spinner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ */}

  {(loading || isInitialLoad) && (
    <div className="spinner-container">
      <div className="spinner"></div>
      <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
    </div>
  )}
  
  <div className="dashboard-header">
    {/* ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° */}
    {user?.jobPosition === 'BIM' && (
      <div className="site-selector">
        <label htmlFor="site">‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
        <select 
          id="site" 
          value={selectedSite} 
          onChange={handleSiteChange}
          disabled={loading}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</option>
          {sites.map(site => (
            <option key={site.id} value={site.id}>
              {site.site_name}
            </option>
          ))}
        </select>
      </div>
    )}
          
    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà */}
    {canCreateNewDocument(user?.jobPosition) && selectedSite && (
      <button 
        className="new-document-btn"
        onClick={handleNewDocumentClick}
        disabled={loading}
      >
        ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
      </button>
    )}
    
    {/* ‡∏õ‡∏∏‡πà‡∏° Export CSV */}
    <button 
      className="export-btn"
      onClick={exportToCSV}
      disabled={loading || isExporting || filteredDocuments.length === 0}
    >
      {isExporting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å...' : '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV'}
    </button>
  </div>

  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏´‡∏£‡∏∑‡∏≠ Success */}
  {error && <div className="error-message">{error}</div>}
  {success && <div className="success-message">{success}</div>}

  {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏î‡∏ô‡∏±‡∏ó‡∏ä‡∏≤‡∏£‡πå‡∏ï */}
  <div className="dashboard-charts">
    {chartData === null ? (
      <div className="chart-container">
        <h2>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á</h2>
        <p className="chart-empty-message">
          ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
        </p>
      </div>
    ) : (
      <div className="chart-container">
        <h2>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á</h2>
        <div className="donut-chart">
          <div className="chart-wrapper">
            <Doughnut data={chartData} options={chartOptions} />
            <DonutCenterText data={chartData} statusFilter={statusFilter} />
          </div>
        </div>
        <div className="chart-note">
          *‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
        </div>
      </div>
    )}
  </div>

  {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
  <div className="search-filter-section">
    <div className="search-box">
      <input
        type="text"
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (ST-001_01 ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="search-input"
      />
    </div>
    
    <div className="filter-options">
      <label className="filter-label">
        <input
          type="checkbox"
          checked={showLatestRevOnly}
          onChange={(e) => {
            console.log("Checkbox changed:", e.target.checked);
            setShowLatestRevOnly(e.target.checked);
          }}
        />
        ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏â‡∏ö‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      </label>
      
      <select 
        value={statusFilter} 
        onChange={(e) => setStatusFilter(e.target.value)}
        className="status-filter"
      >
        <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
        <option value="BIM">BIM</option>
        <option value="SITE">SITE</option>
        <option value="CM">CM</option>
        <option value="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
      </select>
    </div>
  </div>
  
  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
  {filteredDocuments.length > 0 ? (
    <div className="table-container">
      <table className="documents-table">
        <thead>
          <tr>
            <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</th>
            <th>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á shop</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
            <th>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
            <th>‡∏Ñ‡πâ‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏ß‡∏±‡∏ô)</th>
            <th>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</th>
            <th>‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</th>
          </tr>
        </thead>
        <tbody>
          {filteredDocuments.map((doc) => {
            const documentId = doc.full_document_number || `${doc.category_code}-${doc.document_number}_${doc.revision_number}`;
            const responsibleParty = getResponsibleParty(doc);
            const pendingDays = calculatePendingDays(doc);
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            let rowClassName = '';
            if (responsibleParty === 'BIM') rowClassName = 'status-bim';
            else if (responsibleParty === 'SITE') rowClassName = 'status-site';
            else if (responsibleParty === 'CM') rowClassName = 'status-cm';
            else if (responsibleParty === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') rowClassName = 'status-approved';
            
            return (
              <tr 
                key={doc.id}
                className={`${rowClassName} ${selectedDocument && selectedDocument.id === doc.id ? 'selected-row' : ''}`}
                onClick={() => showDocumentDetails(doc)}
              >
                <td>{documentId}</td>
                <td>{doc.title}</td>
                <td>{doc.created_at || '-'}</td>
                <td>{doc.send_approval_date || '-'}</td>
                <td>{doc.approval_date || '-'}</td>
                <td>{doc.status}</td>
                <td>{pendingDays}</td>
                <td>{responsibleParty}</td>
                <td>
                  {doc.files && doc.files.map((file, idx) => (
                    <div key={idx} className="file-link-container">
                      <span className="file-bullet">‚Ä¢</span>
                      <a 
                        href={file.file_url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                        className="view-file-link"
                      >
                        {file.file_name || `‡πÑ‡∏ü‡∏•‡πå ${idx+1}`}
                      </a>
                    </div>
                  ))}
                  {!doc.files && doc.file_url && 
                    <div className="file-link-container">
                      <span className="file-bullet">‚Ä¢</span>
                      <a 
                        href={doc.file_url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                        className="view-file-link"
                      >
                        {doc.file_name || doc.title || "‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå"}
                      </a>
                    </div>
                  }
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  ) : (
    <div className="no-documents-message">
      {documents.length === 0 ? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'}
    </div>
  )}
  
  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà */}
  {selectedDocument && (
    user?.jobPosition === 'BIM' && 
    ['‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)'].includes(selectedDocument.status) ? (
      <DocumentUpdateForm
        document={selectedDocument}
        onSubmit={handleStatusUpdateSubmit}
        onClose={handleFormClose}
        loading={loading}
      />
    ) : (
      <DocumentStatusForm
        document={selectedDocument}
        user={user}
        onSubmit={handleStatusUpdateSubmit}
        onClose={handleFormClose}
        loading={loading}
      />
    )
  )}
  
  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà */}
  {showNewDocumentForm && canCreateNewDocument(user?.jobPosition) && (
    <div className="new-document-modal">
      <div className="modal-content">
        <div className="modal-header">
          <h2>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</h2>
          <button 
            type="button"
            className="close-button"
            onClick={handleNewDocumentClose}
            disabled={loading}
          >
            ‚úï
          </button>
        </div>
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô modal ‡∏ô‡∏µ‡πâ */}
        {newDocumentSuccess && (
          <div className="success-message modal-success">
            {newDocumentSuccess}
          </div>
        )}
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÉ‡∏ô modal ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
        {error && (
          <div className="error-message modal-error">
            {error}
          </div>
        )}
        
        <DocumentUploadForm
          formData={formData}
          setFormData={setFormData}
          onSubmit={handleNewDocumentSubmit}
          loading={loading}
          onClose={handleNewDocumentClose}
          categories={categories}
        />
      </div>
    </div>
  )}

  {/* Success Modal */}
  {showSuccessModal && (
    <SuccessModal 
      message={successMessage}
      onClose={() => setShowSuccessModal(false)}
    />
  )}        
</div>
);
};

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Provider
const RfaDashboard = ({ user }) => {
return (
<DocumentProvider>
  <RfaDashboardContent user={user} />
</DocumentProvider>
);
};

export default RfaDashboard;